#lang racket
(require gigls/unsafe)


(define split-num 
  (lambda (num)
    (list (quotient num 100)
          (remainder (quotient num 10) 10)
          (remainder num 10))
    )
  )


(define draw-central-circles
  (lambda (image circle-num left top right bottom)
    (let* (;[width (/ (image-width image) 5)]
           ;[height (/ (image-height image) 5)]
           ;[row (+ left (/ width 2))]
           ;[col (+ top (/ height 2))]
           ;[b-dis (/ width 15)]
           ;[dis (map (l-s * b-dis) (list-take (list 0 1 6 7 11 12 8 9 3 4) (+ c-num 1)))]
           ;[widths (map (l-s - width) dis)]
           [x-dis (/ (- right left) circle-num 2)]
           [y-dis (/ (- bottom top) circle-num 2)]
           [lefts (map (l-s + left) (map (l-s * x-dis) (iota circle-num)))]
           [tops  (map (l-s + top) (map (l-s * y-dis) (iota circle-num)))]
           [widths (map (l-s - (- right left)) (map (l-s * (* x-dis 2)) (iota circle-num)))]
           [heights (map (l-s - (- bottom top)) (map (l-s * (* y-dis 2)) (iota circle-num)))]
           ;[heights (map (l-s - height) dis)]
           [draw-one-circle! (lambda (l t width height)
                               (image-select-ellipse! image REPLACE 
                                                      l t width height)
                               (image-stroke-selection! image)
                               (image-select-nothing! image)
                               )])
      (for-each draw-one-circle! lefts tops widths heights)
      )
    
    )
  
  )

(define draw-star
  (lambda (image width height )
    (let ([central-col (/ (image-width image)2)]
          [central-row (/ (image-height image)2)]
          [unit-angle (/ (* 4 pi) 5)]
          [start-angle (/ pi 2)])
      ;   (let kernel ([line-so-far 0]
      ;                )
      ;                (if (= line-so-far num)
      ;                    (image-refresh-display! image)
      (image-draw-line! image  central-col ;col1 row1 col2 row2
                        (- central-row (* (/ height 2)))
                        (+ central-col (* (/ width 2) (cos (+ start-angle unit-angle))));zuoxia
                        (- central-row (* (/ height 2) (sin (+ start-angle unit-angle)))));zuoxia
      (image-draw-line! image  (- central-col (* (/ width 2) (cos (+ start-angle unit-angle))));youxia
                        (- central-row (* (/ height 2) (sin (+ start-angle unit-angle))));youxia
                        (+ central-col (* (/ width 2) (cos (+ start-angle (/ unit-angle 2)))));zuoshang
                        (- central-row (* (/ height 2) (sin (+ start-angle (/ unit-angle 2))))));zuoshang
      (image-draw-line! image  (+ central-col (* (/ width 2) (cos (+ start-angle (/ unit-angle 2)))));zuoshang
                        (- central-row (* (/ height 2) (sin (+ start-angle (/ unit-angle 2)))));zuoshang
                        (+ central-col (* (/ width 2) (cos (- start-angle (/ unit-angle 2)))));youshang
                        (- central-row (* (/ height 2) (sin (- start-angle (/ unit-angle 2))))));youshang
      (image-draw-line! image (+ central-col (* (/ width 2) (cos (- start-angle (/ unit-angle 2)))));youshang
                        (- central-row (* (/ height 2) (sin (- start-angle (/ unit-angle 2)))));youshang
                         (+ central-col (* (/ width 2) (cos (+ start-angle unit-angle))));zuoxia
                        (- central-row (* (/ height 2) (sin (+ start-angle unit-angle)))));zuoxia
      (image-draw-line! image  
                         (- central-col (* (/ width 2) (cos (+ start-angle unit-angle))));youxia
                         (- central-row (* (/ height 2) (sin (+ start-angle unit-angle))));youxia
                         central-col ;col1 row1 col2 row2
                         (- central-row (* (/ height 2))));zuoxia
    )))

(define draw-magic-circle1
  (lambda (num width height)
    (let* ([nums (split-num num)]
          [fnum (car nums)]
          [snum (cadr nums)]
          [tnum (caddr nums)]
          [image (image-new width height)]
          [shorter (min width height)]
          [unit-width (/ width 10)]
          [unit-height (/ height 10)]
          [widths (list-take (map (l-s * unit-width) (list 3 5 0 8 2 6 1 7 3 5)) (+ 1 snum))]
          [heights (list-take (map (l-s * unit-height)(list 1 1 2 2 3 3 5 5 7 7)) (+ 1 snum))]
          
          )
      (context-set-fgcolor! "black")
      (image-select-all! image)
      (image-fill-selection! image)
      (image-select-nothing! image)
      
      (context-set-fgcolor! "orange")
      (context-set-brush! "Nova")
      (image-select-ellipse! image REPLACE 
            (* 0.1 width) (* 0.1 height) (* 0.8 width) (* 0.8 height))
      (image-stroke-selection! image)

      (draw-central-circles image tnum (* 0.4 width) (* 0.4 height)
                            (* 0.6 width) (* 0.6 height))
      (for-each draw-star (make-list snum image) (map (l-s * (*  width 0.6)) (map (r-s / 10) (iota snum)))
                                                 (map (l-s * (*  height 0.6)) (map (r-s / 10) (iota snum))))
      (image-refresh-display! image)
      (image-show image)
      )
    
    
    )
  )